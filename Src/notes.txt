## funktioniert nicht -> Fehler: ERROR: LoadError: LLVM error: Program used external function '__nv_logf' which could not be resolved!
loss_val = y .* log.(y_hat .+ eps(Float32)) .+ (1 .- y) .* log.(1 .- y_hat .+ eps(Float32))


## this works but loss doesn't decrease and accuracy stays the same...
@info("calc loss...")
loss_val = y .* log.(feedforward_model(x) .+ eps(Float32)) 
@show(typeof(loss_val))
@info("calc cross entropy")
loss_val2 = (1 .- y) .* log.(1 .- feedforward_model(x) .+ eps(Float32))
@show(typeof(loss_val2))
@info("summming")
loss_val3 = -sum((loss_val .+ loss_val2), dims=1)
@show(typeof(loss_val3))
@info("divide by batchsize")
loss_val4 = (sum(loss_val3) * (1 // size(y, 2)))
@show(typeof(loss_val4))
return loss_val4



## gives readonlymemory error
y_hat = feedforward_model(x)
loss_val = -sum(y .* log.(y_hat .+ eps(Float32)) .+ (1 .- y) .* log.(1 .- y_hat .+ eps(Float32))) * (1 // size(y, 2))
return loss_val

Neither Flux.crossentropy nor crossentropy changed something

## no method matching + 
y_hat = feedforward_model(x)
@show(y_hat)
loss_val = y .* log.(y_hat + eps(Float32)) + (1 - y) .* log.(1 - y_hat + eps(Float32))

## results in error:
┌ Warning: calls to Base intrinsics might be GPU incompatible
│   exception =
│    You called log(x::Float32) in Base.Math at special/log.jl:290, maybe you intended to call log(x::Float32) in CUDAnative at /home/svendt/.julia/packages/CUDAnative/gJDZI/src/device/cuda/math.jl:66 instea
d?
│    Stacktrace:
│     [1] log at special/log.jl:290
│     [2] binarycrossentropy at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
│     [3] #23 at /home/svendt/.julia/packages/GPUArrays/pJw1Y/src/broadcast.jl:49
└ @ CUDAnative ~/.julia/packages/CUDAnative/gJDZI/src/compiler/irgen.jl:107
┌ Warning: calls to Base intrinsics might be GPU incompatible
│   exception =
│    You called log(x::Float32) in Base.Math at special/log.jl:290, maybe you intended to call log(x::Float32) in CUDAnative at /home/svendt/.julia/packages/CUDAnative/gJDZI/src/device/cuda/math.jl:66 instea
d?
│    Stacktrace:
│     [1] log at special/log.jl:290
│     [2] binarycrossentropy at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
│     [3] #23 at /home/svendt/.julia/packages/GPUArrays/pJw1Y/src/broadcast.jl:49
└ @ CUDAnative ~/.julia/packages/CUDAnative/gJDZI/src/compiler/irgen.jl:107
ERROR: LoadError: InvalidIRError: compiling #23(CuArrays.CuKernelState, CUDAnative.CuDeviceArray{Float32,2,CUDAnative.AS.Global}, Base.Broadcast.Broadcasted{Nothing,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}
,typeof(binarycrossentropy),Tuple{Base.Broadcast.Extruded{CUDAnative.CuDeviceArray{Float32,2,CUDAnative.AS.Global},Tuple{Bool,Bool},Tuple{Int64,Int64}},Base.Broadcast.Extruded{CUDAnative.CuDeviceArray{Float3
2,2,CUDAnative.AS.Global},Tuple{Bool,Bool},Tuple{Int64,Int64}}}}) resulted in invalid LLVM IR
Reason: unsupported dynamic function invocation (call to print_to_string(xs...) in Base at strings/io.jl:113)
Stacktrace:
 [1] string at strings/io.jl:156
 [2] throw_complex_domainerror at math.jl:31
 [3] log at special/log.jl:321
 [4] #binarycrossentropy#61 at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
 [5] binarycrossentropy at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
 [6] _broadcast_getindex_evalf at broadcast.jl:578
 [7] _broadcast_getindex at broadcast.jl:551
 [8] getindex at broadcast.jl:511
 [9] #23 at /home/svendt/.julia/packages/GPUArrays/pJw1Y/src/broadcast.jl:50
Reason: unsupported call through a literal pointer (call to jl_alloc_string)
Reason: unsupported call through a literal pointer (call to )
Stacktrace:
 [1] unsafe_copyto! at array.jl:225
 [2] __unsafe_string! at strings/substring.jl:167
 [3] string at strings/substring.jl:183
 [4] throw_complex_domainerror at math.jl:31
 [5] log at special/log.jl:321
 [6] #binarycrossentropy#61 at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
 [7] binarycrossentropy at /home/svendt/.julia/packages/Flux/qXNjB/src/layers/stateless.jl:26
 [8] _broadcast_getindex_evalf at broadcast.jl:578
 [9] _broadcast_getindex at broadcast.jl:551
 [10] getindex at broadcast.jl:511
 [11] #23 at /home/svendt/.julia/packages/GPUArrays/pJw1Y/src/broadcast.jl:50
Reason: unsupported dynamic function invocation (call to print)

return sum(binarycrossentropy.(feedforward_model(x), y)) * 1 // size(y,2) #  using flux binarycrossentropy

## when using my own defined binarycrossentropy function 

[ Info: Training BModel with 10debris
ERROR: LoadError: InvalidIRError: compiling #23(CuArrays.CuKernelState, CuDeviceArray{Float32,2,CUDAnative.AS.Global}, Base.Broadcast.Broadcasted{Nothing,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(Tracker.partial),Tuple{CUDAnative.CuRefValue{typeof(binarycrossentropy)},Base.Broadcast.Extruded{CuDeviceArray{Float32,2,CUDAnative.AS.Global},Tuple{Bool,Bool},Tuple{Int64,Int64}},Int64,Base.Broadcast.Extruded{CuDeviceArray{Float32,2,CUDAnative.AS.Global},Tuple{Bool,Bool},Tuple{Int64,Int64}},Base.Broadcast.Extruded{CuDeviceArray{Float32,2,CUDAnative.AS.Global},Tuple{Bool,Bool},Tuple{Int64,Int64}}}}) resulted in invalid LLVM IR
Reason: unsupported dynamic function invocation (call to #binarycrossentropy#5(epsilon, ::Any, y_hat, y) in Main at /home/svendt/NNFeedbackOperations/Src/nets.jl:98)
Stacktrace:
 [1] binarycrossentropy at /home/svendt/NNFeedbackOperations/Src/nets.jl:98
 [2] partial at /home/svendt/.julia/packages/Tracker/RRYy6/src/lib/array.jl:480
 [3] _broadcast_getindex_evalf at broadcast.jl:578
 [4] _broadcast_getindex at broadcast.jl:551
 [5] getindex at broadcast.jl:511
 [6] #23 at /home/svendt/.julia/packages/GPUArrays/fAX0Q/src/broadcast.jl:50
Stacktrace:






ERROR: LoadError: LLVM error: Program used external function '__nv_logf' which could not be resolved!
Stacktrace:
 [1] handle_error(::Cstring) at /home/svendt/.julia/packages/LLVM/ViliQ/src/core/context.jl:103
 [2] (::getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),
 getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6"))
 {getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},
 getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(+)},getfield(Base.Broadcast, Symbol("##11#12"))
 {getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)}})(::Float32, ::Float32, 
 ::Vararg{Any,N} where N) at ./broadcast.jl:330
 [3] _broadcast_getindex at ./broadcast.jl:350 [inlined]
 [4] getindex at ./broadcast.jl:511 [inlined]
 [5] copy at ./broadcast.jl:787 [inlined]
 [6] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.ArrayStyle{CuArray},Nothing,getfield(Base.Broadcast, Symbol("##2#4"))
 {getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##1#3")),getfield(Base.Broadcast, Symbol("##8#10"))
 {getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbo

bincrossentropy(y_hat, y; epsilon=eps(Float32)) = -y .* CUDAnative.log.(y_hat .+ epsilon) .- (1 .- y) .* CUDAnative.log.(1 .- y_hat .+ epsilon)
loss(x, y) = sum(bincrossentropy(feedforward_model(x), y)) * 1 // size(y,2)



ERROR: LoadError: LLVM error: Program used external function '__nv_logf' which could not be resolved!
Stacktrace:fatal: error thrown and no exception handler available.
ReadOnlyMemoryError()
unknown function (ip: 0x7f30c551215f)
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2197
jl_apply at /buildworker/worker/package_linux64/build/src/julia.h:1571 [inlined]
jl_f__apply at /buildworker/worker/package_linux64/build/src/builtins.c:556
jl_f__apply_latest at /buildworker/worker/package_linux64/build/src/builtins.c:594
#invokelatest#1 at ./essentials.jl:742 [inlined]
invokelatest at ./essentials.jl:741 [inlined]
_start at ./client.jl:438
jl_apply_generic at /buildworker/worker/package_linux64/build/src/gf.c:2197
unknown function (ip: 0x40191d)
unknown function (ip: 0x401523)
__libc_start_main at /build/eglibc-xkFqqE/eglibc-2.19/csu/libc-start.c:287
unknown function (ip: 0x4015c4)


bincrossentropy(y_hat, y; epsilon=eps(Float32)) = -y .* log.(y_hat .+ epsilon) .- (1 .- y) .* log.(1 .- y_hat .+ epsilon)
loss(x, y) = sum(bincrossentropy(feedforward_model(x), y)) * 1 // size(y,2)


################################################################
julia> log.(model_output)
Tracked 10×100 CuArray{Float32,2}:
 -5.22829      -5.65899      -4.83346       -8.17189     -6.82375     -7.22128      -7.38172      …  -5.43017       -8.44146      -4.0262       -7.5665       -7.09854     -10.2623       -4.58934
 -0.00740341   -0.00806884   -0.00564317    -0.0015591   -0.00595605  -0.00262832   -0.0065376       -0.00925663    -0.0023994    -0.00216617   -0.0115079    -0.00263501   -0.00220817   -0.00402904
 -8.64874      -8.25506      -9.4561       -11.2441      -9.43304     -9.96395      -8.81851         -7.39455      -10.1947      -10.5621      -10.3857      -10.1018      -12.9871      -10.1
 -0.000131258  -0.000227298  -0.000188428   -7.28395e-5  -2.55111e-5  -5.06652e-5   -0.000122316     -5.74605e-5    -3.09945e-6   -2.47958e-5   -1.39476e-5   -1.08481e-5   -2.68225e-5   -4.93539e-5
 -8.66483      -8.66355      -8.03003      -10.7754      -8.56148     -8.37562     -11.3589          -8.25722      -10.2122       -9.68357     -12.2319      -11.1527      -17.4337      -10.3964
 -1.12057e-5   -2.22924e-5   -9.51335e-5    -2.53919e-5  -1.57357e-5  -2.52727e-5   -3.07565e-5   …  -4.32739e-5    -1.53781e-5   -4.41075e-6   -2.02656e-6   -1.72855e-5   -1.19209e-7   -0.000139485
 -3.10156      -3.40079      -3.59813       -3.524       -3.4389      -3.85056      -2.89086         -4.10155       -3.66447      -3.80868      -3.4421       -3.34459      -3.16493      -2.93005
 -3.95047      -3.22761      -3.77663       -2.871       -3.85966     -3.98657      -2.14728         -3.23061       -3.42773      -4.64547      -2.8597       -2.80162      -1.67671      -2.72798
 -0.000237433  -1.23978e-5   -9.59681e-5    -8.4639e-6   -2.90875e-5  -9.77521e-6   -1.14442e-5      -0.000132689   -4.05312e-6   -9.17916e-6   -1.29939e-5   -2.18155e-5   -1.07288e-6   -0.000200113
 -3.76708e-5   -9.02455e-5   -5.87719e-5    -3.8147e-6   -8.32115e-5  -1.33515e-5   -7.51021e-6      -0.000140319   -1.39476e-5   -1.53781e-5   -1.94313e-5   -1.20402e-5   -1.19209e-7   -1.97889e-5

julia> size(train_set[1][2])
(10, 100)

julia> y = train_set[1][2]
10×100 CuArray{Float32,2}:
 0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  1.0  1.0  0.0  0.0  …  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 1.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0     0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0
 0.0  0.0  1.0  0.0  1.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  …  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0     0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  1.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0     1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0

julia> -y .* log.(model_output)
Tracked 10×100 CuArray{Float32,2}:
 0.0         5.65899  0.0          0.0     0.0         0.0         0.0         0.0         0.0         …   0.0      0.0         0.0         0.0         0.0         0.0      0.0      0.0     0.0       0.0
 0.00740341  0.0      0.0          0.0     0.0         0.00262832  0.0         0.0         0.00251848      0.0      0.0         0.0         0.0         0.0         0.0      0.0      0.0     0.0       0.0
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0             0.0      0.0         0.0         0.0         0.0         0.0      0.0      0.0     0.0      10.1
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0             0.0      0.0         0.0         5.74605e-5  0.0         0.0      0.0      0.0     0.0       0.0
 0.0         0.0      0.0         10.7754  0.0         0.0         0.0         0.0         0.0             0.0      0.0         0.0         0.0         0.0         0.0      0.0     11.1527  0.0       0.0
 0.0         0.0      9.51335e-5   0.0     1.57357e-5  0.0         3.07565e-5  7.82043e-5  0.0         …   0.0      0.0         0.0         0.0         1.53781e-5  0.0      0.0      0.0     0.0       0.0
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0             3.37369  0.0         0.0         0.0         0.0         0.0      0.0      0.0     0.0       0.0
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0             0.0      0.0         0.0         0.0         0.0         4.64547  2.8597   0.0     1.67671   0.0
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0             0.0      6.47327e-5  0.0         0.0         0.0         0.0      0.0      0.0     0.0       0.0
 0.0         0.0      0.0          0.0     0.0         0.0         0.0         0.0         0.0            -0.0      0.0         2.64648e-5  0.0         0.0         0.0      0.0      0.0     0.0       0.0

(1 .- y) .* log.(1 .- model_output)
Tracked 10×100 CuArray{Float32,2}:
  -0.00537712    -0.0          -0.00799073    -0.000282506   -0.00108826    -0.000731139  …   -0.00439194    -0.000215732   -0.018003     -0.000517621   -0.000826641   -3.49289e-5   -0.0102115
  -0.0           -4.82378      -5.18013       -6.46443       -5.12632       -0.0              -4.68704       -6.03374       -6.13588      -4.47047       -5.94018       -6.1167       -5.51624
  -0.000175372   -0.00025997   -7.82043e-5    -1.31131e-5    -8.00522e-5    -4.70888e-5       -0.000614772   -3.73728e-5    -2.58688e-5   -3.08757e-5    -4.10088e-5    -2.26498e-6   -0.0
  -8.93841       -8.38936      -8.57689       -9.52729      -10.5764        -9.8903           -0.0          -12.6843       -10.6048      -11.1802       -11.4315       -10.5263       -9.91652
  -0.00017257    -0.000172809  -0.000325614   -0.0           -0.000191349   -0.000230458      -0.000259433   -3.67171e-5    -6.22888e-5   -4.88759e-6    -0.0            0.0          -3.0518e-5
 -11.3991       -10.7113       -0.0          -10.5811        -0.0          -10.5858       …  -10.048         -0.0          -12.3315      -13.1092       -10.9657       -15.9424       -8.87763
  -0.0460219     -0.0339155    -0.0277566     -0.0299247     -0.0326266     -0.0214972        -0.0166854     -0.0259517     -0.0224271    -0.0325207     -0.0359117     -0.0431344    -0.0548728
  -0.0194334     -0.0404597    -0.0231661     -0.0583096     -0.0213005     -0.0187377        -0.0403361     -0.0329992     -0.0          -0.0           -0.0626329     -0.0          -0.0675842
  -8.34574      -11.298        -9.25154      -11.6797       -10.4452       -11.5357           -8.92757      -12.416        -11.5986      -11.251        -10.7329       -13.7452       -8.51673
 -10.1866        -9.31302      -9.74188      -12.4766        -9.39417      -11.2239           -8.87166      -11.1802       -11.0826      -10.8486       -11.3273       -15.9424      -10.8304

 -y .* log.(model_output) .- (1 .- y) .* log.(1 .- model_output)
ERROR: LLVM error: Program used external function '__nv_logf' which could not be resolved!
Stacktrace:
 [1] handle_error(::Cstring) at /home/svendt/.julia/packages/LLVM/ViliQ/src/core/context.jl:103
 [2] (::getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)}})(::Float32, ::Float32, ::Vararg{Any,N} where N) at ./broadcast.jl:330
 [3] #8 at ./broadcast.jl:350 [inlined]
 [4] #2 at ./broadcast.jl:298 [inlined]
 [5] _broadcast_getindex_evalf at ./broadcast.jl:578 [inlined]
 [6] _broadcast_getindex at ./broadcast.jl:551 [inlined]
 [7] getindex at ./broadcast.jl:511 [inlined]
 [8] copy at ./broadcast.jl:787 [inlined]
 [9] materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.ArrayStyle{CuArray},Nothing,getfield(Base.Broadcast, Symbol("##2#4")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##1#3")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},typeof(-)},Tuple{CuArray{Float32,2},CuArray{Float32,2},Int64,CuArray{Float32,2},Int64,CuArray{Float32,2}}}) at ./broadcast.jl:753
 [10] broadcast(::getfield(Base.Broadcast, Symbol("##2#4")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##1#3")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},typeof(-)}, ::CuArray{Float32,2}, ::CuArray{Float32,2}, ::Int64, ::Vararg{Any,N} where N) at ./broadcast.jl:707
 [11] ∇broadcast(::getfield(Base.Broadcast, Symbol("##2#4")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##1#3")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(-)},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##8#10")){getfield(Base.Broadcast, Symbol("##7#9")),getfield(Base.Broadcast, Symbol("##5#6")){getfield(Base.Broadcast, Symbol("##7#9"))},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))},typeof(CUDAnative.log)}},getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##11#12")){getfield(Base.Broadcast, Symbol("##13#14"))}},getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##15#16")){getfield(Base.Broadcast, Symbol("##17#18"))}},typeof(*)},typeof(-)}, ::CuArray{Float32,2}, ::TrackedArray{…,CuArray{Float32,2}}, ::Int64, ::CuArray{Fl
 
 # Model output no training initial run 
 model(train_set[10][1])
Tracked 10×100 CuArray{Float32,2}:
 0.00399729  0.000506875  0.000725505  0.000369507  0.00112031  0.000109504  0.00394692  0.000413401  …  0.000530731  0.000345544  0.00427737  0.00147098  0.000783981  0.000477496  0.000282496  8.69249e-5
 0.999981    0.999881     0.999954     0.999998     0.999919    0.999992     0.999997    0.999998        0.999999     0.999999     0.999801    0.999892    0.999947     0.999996     0.999983     0.999989
 0.00273453  0.00524933   0.0313705    0.00334805   0.00529288  0.00177945   0.0046813   0.004825        0.00504038   0.00264192   0.0108309   0.00794867  0.00468339   0.00363285   0.00979883   0.006289
 0.0892104   0.0597667    0.065001     0.269151     0.134926    0.191481     0.676233    0.0672382       0.266096     0.309514     0.225646    0.209061    0.367093     0.762773     0.280185     0.0916664
 0.729368    0.186587     0.0933492    0.258277     0.251458    0.205347     0.328813    0.737517        0.0930317    0.146808     0.326709    0.279574    0.288588     0.266902     0.117422     0.25889
 0.982262    0.987198     0.993896     0.998891     0.991409    0.999135     0.999825    0.990132     …  0.998966     0.99952      0.987698    0.997676    0.993959     0.999443     0.99032      0.998611
 0.800789    0.505696     0.970889     0.913702     0.696826    0.865255     0.984893    0.924336        0.995024     0.986869     0.869634    0.56894     0.859323     0.909553     0.927935     0.931636
 0.0394477   0.0507585    0.0240105    0.00216896   0.0391531   0.00535042   0.00133834  0.0345309       0.00232725   0.00165042   0.058114    0.0374044   0.0387388    0.00344592   0.0354802    0.0270255
 0.13301     0.0934606    0.0283319    0.269936     0.138308    0.0575707    0.0124801   0.0290308       0.0228189    0.0161766    0.208261    0.0372234   0.123322     0.0412343    0.062694     0.0256209
 0.999808    0.999627     0.999721     0.999768     0.999525    0.999952     0.999735    0.99981         0.99943      0.99977      0.999178    0.999897    0.999696     0.999923     0.999823     0.999838
